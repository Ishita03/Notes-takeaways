
val prd  = spark.read.table("prd_priceent_fnd.digital_shopresults").where("shop_crawl_d >= '2024-07-10' AND shop_crawl_d <= '2024-07-18'")

val stg  = spark.read.table("stg_priceent_fnd.digital_shopresults").where("shop_crawl_d >= '2024-07-10' AND shop_crawl_d <= '2024-07-18'")
val prd  = spark.read.table("prd_priceent_fnd.digital_shopresults").where("shop_crawl_d >= '2024-07-01''")

prd.coalesce(20).write.mode("overwrite").format("orc").insertInto("stg_priceent_wrk.digital_shopresults_bkp")

stg.coalesce(20).write.mode("overwrite").format("orc").insertInto("prd_priceent_fnd.digital_shopresults")


   val stgdf = stg.select(columns.map(col): _*)


   val prddf = prd.select(columns.map(col): _*)

   val writeto = finalDF.select(columns.map(col): _*)

   comp.coalesce(20).write.mode("overwrite").format("orc").insertInto("stg_priceent_fnd.digital_shopresults")

   val columns: Seq[String] = Seq(
  "tcin",
  "crawl_id",
  "retailer_short_n",
  "competitor_product_id",
  "crawl_url",
  "shopped_crawl_utc_ts",
  "is_buy_box_winner_f",
  "is_buy_box_fulfiller_f",
  "offer_retail_a",
  "regular_retail_a",
  "competitor_retail_a",
  "currency_c",
  "newton_availability_c",
  "promo_message_t",
  "zip_c",
  "state_c",
  "city_n",
  "saved_html_link",
  "competitor_product_title",
  "sku",
  "competitor_isbn10",
  "competitor_isbn13",
  "upc",
  "item_model_number",
  "review_count",
  "star_rating",
  "crawled_variant_attribute_n",
  "crawled_variant_attribute_value",
  "product_desc",
  "seller_id",
  "buy_box_winner_n",
  "buy_box_fulfiller_n",
  "buy_box_info_seller_id",
  "item_condition_value",
  "item_condition_additional_information",
  "raw_competitor_seller_price_data_arr",
  "seller_item_online_availability",
  "seller_item_buyability",
  "seller_promo_information",
  "seller_review_count",
  "seller_start_rating",
  "is_market_place_f",
  "dpci",
  "department_id",
  "audit_status_f",
  "shop_validity_f",
  "shop_channel",
  "data_provider_c",
  "source_system_n",
  "shop_crawl_d",
  "publish_week_end_d"
)

|-- tcin: string (nullable = true)
 |-- crawl_id: string (nullable = true)
 |-- retailer_short_n: string (nullable = true)
 |-- competitor_product_id: string (nullable = true)
 |-- crawl_url: string (nullable = true)
 |-- shopped_crawl_utc_ts: string (nullable = true)
 |-- is_buy_box_winner_f: boolean (nullable = true)
 |-- is_buy_box_fulfiller_f: boolean (nullable = true)
 |-- offer_retail_a: double (nullable = true)
 |-- regular_retail_a: double (nullable = true)
 |-- competitor_retail_a: double (nullable = true)
 |-- currency_c: string (nullable = true)
 |-- newton_availability_c: string (nullable = true)
 |-- promo_message_t: string (nullable = true)
 |-- zip_c: string (nullable = true)
 |-- state_c: string (nullable = true)
 |-- city_n: string (nullable = true)
 |-- saved_html_link: string (nullable = true)
 |-- competitor_product_title: string (nullable = true)
 |-- sku: string (nullable = true)
 |-- competitor_isbn10: string (nullable = true)
 |-- competitor_isbn13: string (nullable = true)
 |-- upc: string (nullable = true)
 |-- item_model_number: string (nullable = true)
 |-- review_count: string (nullable = true)
 |-- star_rating: string (nullable = true)
 |-- crawled_variant_attribute_n: string (nullable = true)
 |-- crawled_variant_attribute_value: string (nullable = true)
 |-- product_desc: string (nullable = true)
 |-- seller_id: string (nullable = true)
 |-- buy_box_winner_n: string (nullable = true)
 |-- buy_box_fulfiller_n: string (nullable = true)
 |-- buy_box_info_seller_id: string (nullable = true)
 |-- item_condition_value: string (nullable = true)
 |-- item_condition_additional_information: string (nullable = true)
 |-- raw_competitor_seller_price_data_arr: array (nullable = true)
 |    |-- element: struct (containsNull = true)
 |    |    |-- currency: string (nullable = true)
 |    |    |-- price: string (nullable = true)
 |    |    |-- type: string (nullable = true)
 |-- seller_item_online_availability: string (nullable = true)
 |-- seller_item_buyability: string (nullable = true)
 |-- seller_promo_information: string (nullable = true)
 |-- seller_review_count: string (nullable = true)
 |-- seller_start_rating: string (nullable = true)
 |-- is_market_place_f: boolean (nullable = true)
 |-- dpci: string (nullable = true)
 |-- department_id: integer (nullable = true)
 |-- audit_status_f: boolean (nullable = true)
 |-- shop_validity_f: string (nullable = true)
 |-- shop_channel: string (nullable = true)
 |-- data_provider_c: string (nullable = true)
 |-- source_system_n: string (nullable = true)
 |-- shop_crawl_d: string (nullable = true)
 |-- publish_week_end_d: string (nullable = true)


INSERT OVERWRITE TABLE stg_priceent_fnd.digital_shopresults
SELECT
tcin
,null AS crawl_id
,retailer_short_n
,competitor_product_id
,crawl_url
,shopped_crawl_utc_ts
,is_buy_box_winner_f
,is_buy_box_fulfiller_f
,offer_retail_a
,regular_retail_a
,competitor_retail_a
,currency_c
,newton_availability_c
,promo_message_t
,zip_c
,state_c
,city_n
,null AS saved_html_link
,null AS competitor_product_title
,sku
,digital_other_attributes_struct.isbn10 AS competitor_isbn10
,digital_other_attributes_struct.isbn13 AS competitor_isbn13
,upc
,null AS item_model_number
,null AS review_count
,null AS star_rating
,null AS crawled_variant_attribute_n
,null AS crawled_variant_attribute_value
,product_desc
,null AS seller_id
,buy_box_winner_n
,buy_box_fulfiller_n
,null AS buy_box_info_seller_id
,null AS item_condition_value
,null AS item_condition_additional_information
,array(named_struct('currency', cast(null as string) ,'price', cast(null as string) ,'type', cast(null as string)) ) AS raw_competitor_seller_price_data_arr
,inventory_availability_desc AS seller_item_online_availability
,null AS seller_item_buyability
,null AS seller_promo_information
,null AS seller_review_count
,null AS seller_start_rating
,digital_other_attributes_struct.istargetplus AS  is_market_place_f
,dpci
,department_id
,audit_status_f
,shop_validity_f
,shop_channel
,data_provider_c
,source_system_n
,shop_crawl_d
,publish_week_end_d
FROM prd_priceent_fnd.competitor_shopresults
WHERE publish_week_end_d = '2024-09-07' 
AND source_system_n='Newton'


SELECT count(1), from_unixtime(unix_timestamp(shopped_utc_ts, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"), 'yyyy-MM-dd') AS crawl_d
  , data_provider_c
FROM  prd_priceent_fnd.competitor_price_aggregates
  where publish_week_end_d = '2024-09-21' 
  group by from_unixtime(unix_timestamp(shopped_utc_ts, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"), 'yyyy-MM-dd'), data_provider_c


scala> val stgnew71 =stgnew7.withColumn("load_d",lit("2024-09-07"))
stgnew71: org.apache.spark.sql.DataFrame = [channel_n: string, competitor_short_name: string ... 30 more fields]

scala> stgnew71.select("load_d").distinct.show
+----------+
|    load_d|
+----------+
|2024-09-07|
+----------+


scala> stgnew71.write.mode("append").format("orc").insertInto("stg_priceent_wrk.digital_maps_v2")

scala> val stgnew8 = stg_new.where("update_utc_ts between '2024-09-08 00:00:00.000000 UTC' and '2024-09-08 23:00:00.000000 UTC'")
stgnew8: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [channel_n: string, competitor_short_name: string ... 30 more fields]

scala> val stgnew8 = stg_new.where("update_utc_ts between '2024-09-08 00:00:00.000000 UTC' and '2024-09-08 23:00:00.000000 UTC'")
stgnew8: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [channel_n: string, competitor_short_name: string ... 30 more fields]

scala> val stgnew71 =stgnew8.withColumn("load_d",lit("2024-09-08"))
stgnew71: org.apache.spark.sql.DataFrame = [channel_n: string, competitor_short_name: string ... 30 more fields]

scala> val stgnew81 =stgnew8.withColumn("load_d",lit("2024-09-08"))
stgnew81: org.apache.spark.sql.DataFrame = [channel_n: string, competitor_short_name: string ... 30 more fields]

scala> stgnew81.count
res13: Long = 78

scala> stgnew81.select("load_d").distinct.sho
<console>:26: error: value sho is not a member of org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]
       stgnew81.select("load_d").distinct.sho
                                          ^

scala> stgnew81.select("load_d").distinct.show
+----------+


