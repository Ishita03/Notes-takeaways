
ThisBuild / name := "dq-verifier"
ThisBuild / version := "1.0"
ThisBuild / scalaVersion := "2.13.8"
ThisBuild / organization := "com.tgt.de.price"

val scope = Compile
resolvers ++= Seq(
  "Artifactory" at "https://binrepo.target.com/artifactory/kelsa/",
  "jitpack" at "https://jitpack.io",
  "Maven Artifactory" at "https://repo1.maven.org/maven2/",
  "DataSpectrum Internal Repository" at "https://binrepo.target.com/artifactory/dataspectrum-internal")

ThisBuild / scapegoatVersion := "1.4.12"
//coverage
//coverageHighlighting := true
//coverageEnabled in Test := true
scapegoatReports := Seq("all")

scapegoatDisabledInspections := Seq(
  "NullAssignment",
  "AsInstanceOf",
  "CatchException",
  "NullParameter",
  "CatchThrowable",
  "UnsafeTraversableMethods"
)

libraryDependencies ++= Seq(
  "com.tgt.dsc.kelsa.datapipeline" % "kelsa-core_2.13" % "3.0.2",
  "com.typesafe" % "config" % "1.4.2",
  "com.amazon.deequ" %% "deequ" % "0.1.0-SNAPSHOT",
  "com.tgt.dsc.kelsa.kelsa-context-pipeline" % "kelsa_data_quality_2.13" % "3.0.0" % scope,
  "org.apache.spark" %% "spark-sql-kafka-0-10" % "3.5.1" % Provided,
  "org.apache.spark" %% "spark-core" % "3.5.1" % Provided,
  "org.apache.spark" %% "spark-sql" % "3.5.1" % Provided,
  "org.apache.spark" %% "spark-hive" % "3.5.1" % Provided,
  "org.scalatest" %% "scalatest" % "3.2.17" % Test
).map(_.force())
  .map(_.exclude("org.slf4j", "slf4j-simple"))

libraryDependencies += "com.google.guava" % "guava" % "15.0"
libraryDependencies += "org.scala-lang" % "scala-compiler" % scalaVersion.value
libraryDependencies += "org.scala-lang.modules" %% "scala-xml" % "2.1.0"



ThisBuild / evictionErrorLevel := Level.Warn

assembly / assemblyMergeStrategy := {
  case PathList("META-INF", xs @ _*) => MergeStrategy.discard
  case x => MergeStrategy.first
}

lazy val root = (project in file("."))
  .enablePlugins(BuildInfoPlugin)
  // .enablePlugins(GitVersioning)
  .settings(
    name := "dq-verifier",
    organization := "com.tgt.de.price.kelsa",
    buildInfoKeys ++= Seq[BuildInfoKey](
      resolvers,
      libraryDependencies,
      BuildInfoKey.map(name) {
        case (k, v) => "project" + k.capitalize -> v.capitalize
      },
      BuildInfoKey.action("buildTime") {
        System.currentTimeMillis
      }
    ),
    buildInfoPackage := "com.tgt.dse.verifier"
  )

//This is the entry point for the application
assembly / mainClass := Some("com.tgt.dse.verifier.DataPipelineKickStarter")

assembly / assemblyJarName := "dq_verifier_3.5.1-2.13.08.jar"